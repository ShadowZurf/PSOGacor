import styles from "./site-header.module.css";
import { Separator } from "@/components/ui/separator";
import { SidebarTrigger } from "@/components/ui/sidebar";
import { useRouter } from 'next/router';
import React from "react";

function formatRouteSegmentToTitle(segment?: string): string {
  if (!segment || segment.trim() === '') return 'Beranda';
  let title = segment.replace(/-/g, ' ').replace(/_/g, ' ');
  title = title
    .toLowerCase()
    .split(' ')
    .filter(word => word.length > 0)
    .map(word => word.charAt(0).toUpperCase() + word.slice(1))
    .join(' ');
  if (title.toLowerCase() === 'dashboard' && segment?.toLowerCase() === 'dashboard') return 'Beranda';
  return title;
}

const featureKeywordTitles: { [keyword: string]: string } = {
  'konsultasioffline': 'Konsultasi Offline',
  'lagutenang' :'Lagu Tenang'
};

const sectionTitles: { [key: string]: string } = {
  '/konsultasioffline': 'Konsultasi Offline',
  '/lagutenang' : 'Lagu Tenang'
};

const customRouteTitles: { [key: string]: string } = {
  '/': 'Beranda',
  '/mahasiswa/beranda': 'Beranda',
};

export function getPageTitle(pathname: string): string {
  // Cek exact match dan prefix match untuk customRouteTitles
  for (const key in customRouteTitles) {
    if (pathname === key || pathname.startsWith(key + '/')) {
      return customRouteTitles[key];
    }
  }

  const sortedSectionKeys = Object.keys(sectionTitles).sort((a, b) => b.length - a.length);
  for (const sectionBasePath of sortedSectionKeys) {
    if (pathname.startsWith(sectionBasePath + '/') || pathname === sectionBasePath) {
      return sectionTitles[sectionBasePath];
    }
  }

  const pathSegmentsLower = pathname.toLowerCase().split('/').filter(segment => segment !== '');
  const sortedFeatureKeywords = Object.keys(featureKeywordTitles).sort((a, b) => b.length - a.length);

  for (const keyword of sortedFeatureKeywords) {
    if (pathSegmentsLower.includes(keyword)) {
      return featureKeywordTitles[keyword];
    }
  }

  const pathSegmentsOriginalCase = pathname.split('/').filter(segment => segment !== '');
  if (pathSegmentsOriginalCase.length === 0) {
    return customRouteTitles['/'] || 'Beranda';
  }

  let lastSignificantSegment: string | undefined;
  for (let i = pathSegmentsOriginalCase.length - 1; i >= 0; i--) {
    const currentSegment = pathSegmentsOriginalCase[i];
    if (!(currentSegment.startsWith('[') && currentSegment.endsWith(']'))) {
      lastSignificantSegment = currentSegment;
      break;
    }
  }

  if (!lastSignificantSegment && pathSegmentsOriginalCase.length > 1 && pathSegmentsOriginalCase[pathSegmentsOriginalCase.length - 1].startsWith('[')) {
    const potentialSegment = pathSegmentsOriginalCase[pathSegmentsOriginalCase.length - 2];
    if (!(potentialSegment.startsWith('[') && potentialSegment.endsWith(']'))) {
      lastSignificantSegment = potentialSegment;
    }
  }

  if (!lastSignificantSegment && pathSegmentsOriginalCase.some(p => p.startsWith('['))) {
    if (pathSegmentsLower.length > 1) {
        const parentSegmentLower = pathSegmentsLower[pathSegmentsLower.length - 2];
        for (const keyword of sortedFeatureKeywords) {
            if (parentSegmentLower === keyword) {
                return featureKeywordTitles[keyword];
            }
        }
    }
    return 'Detail';
  }

  const autoGeneratedTitle = formatRouteSegmentToTitle(lastSignificantSegment);

  if (autoGeneratedTitle) {
    if (autoGeneratedTitle === 'Beranda') {
      if (
        pathname === '/' ||
        customRouteTitles[pathname] === 'Beranda' ||
        pathname.startsWith('/mahasiswa/beranda') ||
        pathname.startsWith('/psikolog/beranda')
      ) {
        return 'Beranda';
      }
    } else {
      return autoGeneratedTitle;
    }
  }

  return 'Beranda';
}

export function SiteHeader() {
  const router = useRouter();
  const { pathname } = router;
  const pageTitle = getPageTitle(pathname);

  return (
    <div className={styles.siteHeaderSticky}> 
      <div className="flex w-full items-center gap-1 px-4 lg:gap-2 lg:px-6">
        <SidebarTrigger className="-ml-1" />
        <Separator
          orientation="vertical"
          className="mx-2 data-[orientation=vertical]:h-4"
        />
        <span className={styles.title}>{pageTitle}</span>
      </div>
      <Separator className={styles.separator} />
    </div>
  );
}